{"version":3,"sources":["services/activities.js","services/images.js","components/Canvas.js","App.js","index.js"],"names":["axios","defaults","headers","common","baseUrl","get","then","response","data","imageData","post","console","log","start_background_color","undo_array","Canvas","canvasRef","useRef","contextRef","useState","isDrawing","setIsDrawing","isReset","setIsReset","savedImages","setSavedImages","useEffect","canvas","current","width","height","style","context","getContext","fillStyle","fillRect","imageService","images","lineCap","strokeStyle","lineWidth","clearDrawing","e","preventDefault","className","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","push","getImageData","onMouseMove","lineTo","stroke","onMouseLeave","ref","map","image","key","alt","src","drawing_src","onInput","evt","target","value","colorPicker","type","class","onChange","penSize","min","max","step","onClick","setEraser","pop","length","putImageData","newSavedImage","toDataURL","userid","saveImages","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3f7580d.chunk.js","sourcesContent":["import axios from 'axios'\n\naxios.defaults.headers.common = {\n  \"Content-Type\": \"application/json\"\n}\n\nconst baseUrl = 'api/activities' \n\nconst getAllActivities = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst getNewActivity = () => {\n  const request = axios.get(`${baseUrl}/new`)\n  return request.then(response => response.data)\n}\n\nconst addActivity = activity => {\n  const request = axios.post(baseUrl, activity)\n  \n  return request.then(response => {\n    console.log('this got sent back from the backend', response)\n    return response.data\n  })\n}\n\nconst deleteAllActivities = () => {\n  const request = axios.get(`${baseUrl}/delete`)\n  return request.then(response => response.data)\n}\n\nexport default { getAllActivities, getNewActivity, addActivity, deleteAllActivities }","import axios from 'axios'\n\naxios.defaults.headers.common = {\n  \"Content-Type\": \"application/json\"\n}\n\nconst baseUrl = 'api/images' \n\nconst getAllImages = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst addImage = imageData => {\n    const request = axios.post(baseUrl, imageData)\n    \n    return request.then(response => {\n      console.log('this got sent back from the backend', response)\n      return response.data\n    })\n  }\n\n  export default { getAllImages, addImage }","import React, { useEffect, useRef, useState } from 'react'\nimport imageService from '../services/images'\n\nconst start_background_color = \"white\"\nconst undo_array = []\n\nconst Canvas =()=>{\n\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n    const [isDrawing, setIsDrawing] = useState(false)\n    const [isReset, setIsReset] = useState()\n    const [savedImages, setSavedImages] = useState([])\n\n\n    useEffect(() => {\n        setIsReset(false)\n        const canvas = canvasRef.current;\n        canvas.width = 600;\n        canvas.height = 400;\n        canvas.style.width = `${canvas.width}px`\n        canvas.style.height = `${canvas.height}px`\n        \n        const context = canvas.getContext(\"2d\")\n\n        context.fillStyle = start_background_color;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n\n        imageService\n            .getAllImages()\n            .then(data => {\n                console.log(data)\n                setSavedImages(data.images)\n        })\n        \n        \n\n        // context.scale(2,2)\n        context.lineCap = 'round'\n        context.strokeStyle = 'black'\n        context.lineWidth = 5\n        contextRef.current = context\n    }, [isReset])\n\n    const startDrawing =({nativeEvent})=>{\n        const {offsetX, offsetY} = nativeEvent\n        contextRef.current.beginPath()\n        contextRef.current.moveTo(offsetX, offsetY)\n        setIsDrawing(true)\n    }\n\n    const finishDrawing =()=>{\n        \n        setIsDrawing(false)\n        contextRef.current.closePath()\n        undo_array.push(contextRef.current.getImageData(0, 0, 600, 400));\n        console.log(undo_array)\n    }\n\n    const leaveCanvas =()=>{\n        setIsDrawing(false)\n        contextRef.current.closePath()\n    }\n\n    const draw =({nativeEvent})=>{\n        if (!isDrawing){\n            return\n        }\n        const {offsetX, offsetY} = nativeEvent\n        contextRef.current.lineTo(offsetX, offsetY)\n        contextRef.current.stroke()\n    }\n\n    const colorPicker =(evt)=>{\n        contextRef.current.strokeStyle = evt.target.value\n    }\n    \n    const penSize=(evt) =>{\n        contextRef.current.lineWidth = evt.target.value\n    }\n\n    const clearDrawing=(e)=>{\n        e.preventDefault()\n        setIsReset(true)\n    }\n\n    const undoLast = (evt) =>{\n        evt.preventDefault()\n        undo_array.pop();\n        if(undo_array.length > 0){\n            \n            contextRef.current.putImageData(undo_array[undo_array.length-1], 0, 0);\n            console.log(undo_array)\n        }\n        if(undo_array.length === 0){\n            clearDrawing(evt)\n        }\n    }\n\n    const setEraser = (evt) =>{\n        evt.preventDefault()\n        contextRef.current.strokeStyle = start_background_color\n    }\n\n    const saveImages =(evt)=>{\n        console.log(savedImages)\n        evt.preventDefault()\n        let width= 600;\n        let height = 400;       \n        \n        let canvas = canvasRef.current\n        let newSavedImage = canvas.toDataURL()\n        console.log(newSavedImage)\n        setSavedImages([...savedImages, {drawing_src: newSavedImage}])\n        imageService.addImage({\n            drawing_src: `${newSavedImage}`,\n            userid: 1\n        })\n    }\n\n    const loadImage = (evt)=>{\n        evt.preventDefault()\n        contextRef.current.putImageData(savedImages[0], 0, 0);\n    }\n\n    const handleAddImage = (userId, newImageData) => {\n        imageService\n          .addImage({\n            user: userId,\n            imageArr: newImageData\n          })\n      }\n\n    return (\n        <div className=\"canvas-holder\">\n            <canvas\n                onMouseDown={startDrawing}\n                onMouseUp={finishDrawing}\n                onMouseMove={draw}\n                onMouseLeave={leaveCanvas}\n                ref={canvasRef}\n            />\n            <div className=\"saved-images\">\n                <h3>saved images</h3>\n                {\n                    savedImages.map((image, key)=>(\n                        <img key={key} className=\"drawing\" alt='saved drawing' src={image.drawing_src}></img>\n                    ))\n                }\n                    \n                \n            </div>\n            <input onInput={(evt)=>colorPicker(evt)} type=\"color\" class=\"color-picker\"></input>\n            <input onChange={(evt)=>penSize(evt)} type=\"range\" min=\"1\" max=\"100\" class=\"pen-range\" step=\"1\" ></input>\n            <button onClick={(evt)=>setEraser(evt)} type=\"button\" className=\"eraser\">Erase</button>\n            \n            <button onClick={(e)=>clearDrawing(e)} type=\"button\" className=\"button\">Clear</button>\n            <button onClick={(e)=>undoLast(e)} type=\"button\" className=\"button\">Undo</button>\n            <button onClick={(e)=>saveImages(e)} type=\"button\" className=\"button\">Save</button>\n            <button onClick={(e)=>loadImage(e)} type=\"button\" className=\"button\">Load</button>\n        </div> \n    )\n}\n\nexport default Canvas","import React from 'react'\n\nimport ActivitySelector from './components/ActivitySelector'\nimport Canvas from './components/Canvas';\n\nfunction App() {\n  \n\n  return (\n    <div>\n      <h1> APPs</h1>\n      <Canvas />\n      {/* <ActivitySelector /> */}\n    </div>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}